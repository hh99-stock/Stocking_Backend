name: Deploy to EC2 with ECR
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # AWS에 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      # Docker 이미지 빌드 및 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stocking
          IMAGE_TAG: latest
          PORT: 3000
          DATABASE_URL: ${{ secrets.DATABASE_URL}}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST}}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT}}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME}}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME}}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD}}
          JWT_SECRET: ${{ secrets.JWT_SECRET}}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID}}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET}}
          USER: ${{ secrets.USER}}
          PASS: ${{ secrets.PASS}}
          FRONTEND_URL: ${{secrets.FRONTEND_URL}}
          BACKEND_URL: ${{secrets.BACKEND_URL}}
          NAVER_ID: ${{secrets.NAVER_ID}}
          NAVER_SECRET: ${{secrets.NAVER_SECRET}}
          KAKAO_ID: ${{secrets.KAKAO_ID}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{ secrets.AWS_REGION}}
          REMOTE_PRIVATE_KEY: ${{ secrets.REMOTE_PRIVATE_KEY}}
          EC2_HOST: ${{ secrets.EC2_HOST}}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME}}
          REDIS_HOST: ${{ secrets.REDIS_HOST}}
          REDIS_PORT: ${{ secrets.REDIS_PORT}}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD}}
          SOCKET_SERVER_URL: ${{ secrets.SOCKET_SERVER_URL}}
          KAFKA_IP1: ${{ secrets.KAFKA_IP1}}
          KAFKA_IP2: ${{ secrets.KAFKA_IP2}}
          KAFKA_IP3: ${{ secrets.KAFKA_IP3}}
          MATCHING_REDIS_HOST: ${{ secrets.MATCHING_REDIS_HOST}}
          MATCHING_REDIS_PORT: ${{ secrets.MATCHING_REDIS_PORT}}
        run: |
          docker-compose build
          docker-compose push

      # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작!~
      - name: SSH into EC2 instance and restart Docker container for socket
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST_SOCKET}}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/stocking-socket:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker stop $(docker ps -a -q)
            sudo docker ps -a
            sudo docker rm $(docker ps -aq)
            sudo docker ps -a
            sudo docker run -d -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/stocking-socket:latest
            sudo docker run -d -p 9100:9100 --name node-exporter ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker system prune -a -f

      # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작!~
      - name: SSH into EC2 instance and restart Docker container for main
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/stocking:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker stop $(docker ps -a -q)
            sudo docker ps -a
            sudo docker rm $(docker ps -aq)
            sudo docker ps -a
            sudo docker run -d -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/stocking:latest
            sudo docker run -d -p 9100:9100 --name node-exporter ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker system prune -a -f

      # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작!~
      - name: SSH into EC2 instance and restart Docker container for execution
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST_EXECUTION}}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/stocking-execution:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker stop $(docker ps -a -q)
            sudo docker ps -a
            sudo docker rm $(docker ps -aq)
            sudo docker ps -a
            sudo docker run -d -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/stocking-execution:latest
            sudo docker run -d -p 9100:9100 --name node-exporter ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker system prune -a -f

      # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작!~
      - name: SSH into EC2 instance and restart Docker container for matching
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST_MATCHING}}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/stocking-matching:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker stop $(docker ps -a -q)
            sudo docker ps -a
            sudo docker rm $(docker ps -aq)
            sudo docker ps -a
            sudo docker run -d -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/stocking-matching:latest
            sudo docker run -d -p 9100:9100 --name node-exporter ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker system prune -a -f
            # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작!~

      - name: SSH into EC2 instance and restart Docker container for game
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST_GAME}}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/stocking-matching:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker stop $(docker ps -a -q)
            sudo docker ps -a
            sudo docker rm $(docker ps -aq)
            sudo docker ps -a
            sudo docker run -d -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/stocking-matching:latest
            sudo docker run -d -p 9100:9100 --name node-exporter ${{ steps.login-ecr.outputs.registry }}/node-exporter:latest
            sudo docker ps -a
            sudo docker system prune -a -f