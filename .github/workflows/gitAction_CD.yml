name: Deploy to EC2 with ECR
#ECRd∂S
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Verify Secrets
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          echo "DATABASE_URL: ${{ secrets.DATABASE_URL }}"
          echo "PORT: ${{ secrets.PORT }}"
          echo "DATABASE_HOST: ${{ secrets.DATABASE_HOST }}"
          echo "DATABASE_PORT: ${{ secrets.DATABASE_PORT }}"
          echo "DATABASE_NAME: ${{ secrets.DATABASE_NAME }}"
          echo "DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}"
          echo "DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}"
          echo "JWT_SECRET: ${{ secrets.JWT_SECRET }}"
          echo "GOOGLE_ID: ${{ secrets.GOOGLE_ID }}"
          echo "GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}"
          echo "KAKAO_ID: ${{ secrets.KAKAO_ID }}"
          echo "NAVER_ID: ${{ secrets.NAVER_ID }}"
          echo "NAVER_SECRET: ${{ secrets.NAVER_SECRET }}"
          echo "BACKEND_URL: ${{ secrets.BACKEND_URL }}"
          echo "REDIS_HOST: ${{ secrets.REDIS_HOST }}"
          echo "REDIS_PORT: ${{ secrets.REDIS_PORT }}"
          echo "REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}"
          echo "REMOTE_PRIVATE_KEY: ${{ secrets.REMOTE_PRIVATE_KEY }}"
          echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
          echo "EC2_USERNAME: ${{ secrets.EC2_USERNAME }}"
       

      # AWS에 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      # ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Docker 이미지 빌드 및 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: stocking
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --build-arg PORT=${{ secrets.PORT }} \
            --build-arg DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
            --build-arg DATABASE_PORT=${{ secrets.DATABASE_PORT }} \
            --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --build-arg DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --build-arg GOOGLE_ID=${{ secrets.GOOGLE_ID }} \
            --build-arg GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} \
            --build-arg KAKAO_ID=${{ secrets.KAKAO_ID }} \
            --build-arg NAVER_ID=${{ secrets.NAVER_ID }} \
            --build-arg NAVER_SECRET=${{ secrets.NAVER_SECRET }} \
            --build-arg BACKEND_URL=${{ secrets.BACKEND_URL }} \
            --build-arg REDIS_HOST=${{ secrets.REDIS_HOST }} \
            --build-arg REDIS_PORT=${{ secrets.REDIS_PORT }} \
            --build-arg REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # SSH로 EC2 인스턴스에 접속하여 Docker 컨테이너 재시작
      - name: SSH into EC2 instance and restart Docker container
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          port: 22
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/stocking:latest
            sudo docker ps -a
            sudo docker stop $(docker ps -a -q)
            sudo docker ps -a
            sudo docker rm $(docker ps -a -q)
            sudo docker ps -a
            sudo docker images
            sudo docker run -d --name stocking -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/stocking:latest
            sudo docker ps -a
            sudo docker system prune -a -f
            sudo docker images